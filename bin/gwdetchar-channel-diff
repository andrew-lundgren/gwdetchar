#!/usr/bin/env python
# coding=utf-8
# Copyright (C) LIGO Scientific Collaboration (2017-)
#
# This file is part of the GW DetChar python package.
#
# GW DetChar is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GW DetChar is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GW DetChar.  If not, see <http://www.gnu.org/licenses/>.

"""Find settings that change between two times
"""

from __future__ import print_function

from gwpy.io import datafind
from gwpy.io.gwf import get_channel_names
from gwpy.timeseries import TimeSeriesDict
from numpy import diff

def find_sec_frames(ifo,start,end):
    ifo_lett = ifo[0]
    conn = datafind.connect()
    cache = conn.find_frame_urls(ifo_lett, ifo_lett+'1_T',
                                start, end, urltype='file')
    return cache

import argparse
parser = argparse.ArgumentParser(description='Find state changes.')
parser.add_argument('-i','--ifo', type=str, help='IFO', required=True)
parser.add_argument('-s','--t1', type=int, help='First GPS time', required=True)
parser.add_argument('-e','--t2', type=int, help='Second GPS time', required=True)
parser.add_argument('-p','--padding', type=int, help='Amount of time before t1 to use to determine whether channel is static', default=8)
parser.add_argument('-o','--output', type=str, help='Filename to output results to (default to stdout).')

args = parser.parse_args()

# Shortcuts for the times
t1, t2 = args.t1, args.t2

if args.output:
    outfile = open(args.output,'w')
else:
    outfile = None

# Find the data
ifo=args.ifo
cache1=find_sec_frames(ifo, t1-args.padding, t1)
cache2=find_sec_frames(ifo, t2, t2+1)

channels=filter(lambda x: x.endswith('.mean'),
                get_channel_names(cache1[0].path))

print('# Diff of channels at %u and %u' % (t1,t2),
        file=outfile)

for idx in range(0,len(channels),10000):
    chans = channels[idx:idx+10000]
    data_dict1=TimeSeriesDict.read(cache1, chans, t1-args.padding, t1,
                                format='framecpp', type='adc', nproc=8)
    data_dict2=TimeSeriesDict.read(cache2, chans, t2, t2+1,
                                format='framecpp', type='adc', nproc=8)
    for chan in chans:
        data1=data_dict1[chan].value
        data2=data_dict2[chan].value
        # Check for unchanging channel
        if diff(data1).any():
            continue

        if data1[-1] != data2[0]:
            dispchan = chan.split('.')[0]
            print('%s\t%.6g\t%.6g' % (dispchan, data1[-1], data2[0]),
                    file=outfile)

if outfile:
    outfile.close()
